---
import { getCollection, z } from 'astro:content'
// import { JSDOM } from 'jsdom'
import { Icon } from 'astro-icon/components'
interface Props {
  url: string;
  useMargin?: boolean;
}
import * as fs from 'fs'
const { url, useMargin = true } = Astro.props

// cdnのツイート情報をパースするためのzodスキーマ
const FetchedCdnTweetSchema = z.object({
  __typename: z.string().optional(),
  created_at: z.string(),
  entities: z.object({
    hashtags: z.array(z.object({
      indices: z.array(z.number()),
      text: z.string(),
    })),
    media: z.array(z.object({
      display_url: z.string(),
      expanded_url: z.string(),
      indices: z.array(z.number()),
      url: z.string(),
    })).optional(),
    urls: z.array(z.object({
      display_url: z.string(),
      end: z.number(),
      expanded_url: z.string(),
      start: z.number(),
      url: z.string(),
    })),
    user_mentions: z.array(z.object({
      id_str: z.string(),
      indices: z.array(z.number()),
      name: z.string(),
      screen_name: z.string(),
    })),
  }),
  id_str: z.string(),
  mediaDetails: z.array(z.object({
    display_url: z.string(),
    media_url_https: z.string(),
  })).optional(),
  possibly_sensitive: z.boolean().optional(),
  text: z.string(),
  user: z.object({
    id_str: z.string(),
    name: z.string(),
    profile_image_shape: z.string(),
    profile_image_url_https: z.string(),
    screen_name: z.string(),
  }),
})

// cdnのツイート情報をパースするためのzodスキーマ（引用ツイート付き）
const FetchedCdnTweetSchemaWithQuoted = FetchedCdnTweetSchema.extend({
  quoted_tweet: FetchedCdnTweetSchema.optional(),
})

/**
 * ツイートの文面を整形し、html形式で返す
 * @param cdnContent ツイート情報
 * @returns html text
 */
function beautifyTweet(cdnContent: z.infer<typeof FetchedCdnTweetSchema>): string {
  let tweet = cdnContent.text.replace('\n', '<br />')

  for (const entity of Object.keys(cdnContent.entities)) {
    if (entity === 'media') {
      for (const media of cdnContent.entities.media!) {
        tweet = tweet.replace(media.url, "")
      }
    } else if (entity === 'urls') {
      for (const url of cdnContent.entities.urls) {
        tweet = tweet.replace(url.url, `<a target="_blank" href="${url.url}">${url.display_url}</a>`)
      }
    } else if (entity === 'user_mentions') {
      for (const mention of cdnContent.entities.user_mentions) {
        tweet = tweet.replace(`@${mention.screen_name}`, `<a target="_blank" href="https://twitter.com/${mention.screen_name}">@${mention.screen_name}</a>`)
      }
    } else if (entity === 'hashtags') {
      for (const hashtag of cdnContent.entities.hashtags) {
        tweet = tweet.replace(`#${hashtag.text}`, `<a target="_blank" href="https://twitter.com/hashtag/${hashtag.text}">#${hashtag.text}</a>`)
      }
    }
  }

  return tweet
}

/**
 * ツイート情報を整形し、保存する
 * @param cdnContent ツイート情報
 * @returns 整形されたツイート情報
 */
function generateAndSavePostInfo(cdnContent: z.infer<typeof FetchedCdnTweetSchemaWithQuoted>) {
  // ツイートの文面を整形
  const tweet = beautifyTweet(cdnContent)

  // cdnから取得したツイート情報には画像のURLが含まれているため、それを抽出
  const images = []
  if (cdnContent.mediaDetails) {
    for (const media of cdnContent.mediaDetails) {
      images.push(media.media_url_https)
    }
  }

  const id = cdnContent.id_str
  const postInfo = {
    date: cdnContent.created_at,
    id,
    images,
    name: cdnContent.user.name,
    tweet,
    quotedTweet: cdnContent.quoted_tweet?.id_str,
    userId: cdnContent.user.screen_name,
    userImage: cdnContent.user.profile_image_url_https,
  }

  fs.writeFileSync(`./src/content/tweet/${id}.json`, JSON.stringify(postInfo))

  return postInfo
}

// ツイートのURLからidを取得
const id = url.split('/').pop()?.split("?")[0] ?? ''

// ローカルのツイート情報を取得
const xPosts = await getCollection('tweet') ?? []
let postWithId = xPosts.find((v) => v.id === id)?.data

// ローカルにツイート情報がない場合は取得し、保存する
if (postWithId === undefined) {
  // 埋め込みツイートにアクセスするためのURL
  const base = "https://publish.twitter.com/oembed"
  const baseUrl = new URL(base)
  baseUrl.searchParams.set("url", url)
  baseUrl.searchParams.set("omit_script", "true")

  // cdnにアクセスするためのURL
  const cdn = `https://cdn.syndication.twimg.com/tweet-result?id=${id}&lang=ja&token=a`

  // 埋め込みツイートにを読み込まないと、cdnのアクセスに失敗することがある
  await fetch(baseUrl.toString())
    .then<{ html: string }>((res) => res.json())
    .catch(() => null)

  const rawCdnContent = await fetch(cdn)
    .then((res) => res.json())
    .catch(() => null)

  // cdnから取得したツイート情報をパース
  const contentCdn = FetchedCdnTweetSchemaWithQuoted.parse(rawCdnContent)

  if (contentCdn === undefined) {
    throw new Error("Failed to fetch tweet")
  }

  // ツイート情報を整形し、保存
  postWithId = generateAndSavePostInfo(contentCdn)

  // 引用リツイートがある場合は、引用リツイートの情報を整形し、保存
  if (contentCdn.quoted_tweet) {
    generateAndSavePostInfo(contentCdn.quoted_tweet)
  }
}
---

{
  postWithId && (
    <div class:list={`flex justify-center ${useMargin ? 'm-4' : ''}`}>
      <div class="flex flex-col w-[80vw] md:w-[500px] rounded-xl p-4 bg-white">
        <div class="flex flex-row mx-2">
          <a class="flex flex-row" href={`https://twitter.com/${postWithId.userId}`} target="_blank">
            <img alt={`${postWithId.name} icon`} class="w-10 h-10 rounded-full mr-2" src={postWithId.userImage} />
            <div class="flex flex-col">
              <div class="flex text-black text-base font-semibold">
                {postWithId.name}
              </div>
              <div class="flex text-gray-500 text-sm font-normal">
                {postWithId.userId}
              </div>
            </div>
          </a>
          <div class="ml-auto my-auto">
            <a href={`https://twitter.com/${postWithId.userId}/status/${postWithId.id}`} target="_blank">
              <Icon class="h-7 w-7" name="devicon:twitter" />
            </a>
          </div>
        </div>
        {/* eslint-disable-next-line astro/no-set-html-directive */}
        <p class="text-black mx-2 my-4" set:html={postWithId.tweet}/>
        {
          postWithId.images.length > 0 && (
            <div
              class={`grid grid-cols-${postWithId.images.length > 1 ? 2 : 1} mb-4 mx-auto`}
              style={`grid-auto-rows: ${postWithId.images.length > 2 ? '200px' : 'auto'}; grid-auto-columns: 1fr;`}
            >
              {
                postWithId.images.map((v, i) => {
                  let style = "";
                  if (postWithId.images.length === 1) {
                    style = 'max-height: 400px'
                  } else if (postWithId.images.length === 3) {
                    if (i === 0) {
                      style = `grid-area: 1 / 1 / 3 / 2`
                    } else if (i === 1) {
                      style = `grid-area: 1 / 2 / 2 / 3`
                    } else {
                      style = `grid-area: 2 / 2 / 3 / 3`
                    }
                  } else {
                    style = `grid-row: ${Math.floor(i / 2) + 1}`
                  }
                  return <img alt={`tweet media ${i+1}`} class="object-cover h-full w-full" loading="lazy" src={v} style={style} />
                })
              }
            </div>
          )
        }
        {
          postWithId.quotedTweet && (
            <div class="border-gray-300 border rounded-lg p-0 mb-4">
              <Astro.self url={postWithId.quotedTweet} useMargin={false} />
            </div>
          )
        }
        <tweet-date data-message={postWithId.date}>
          <p class="text-left text-gray-500 mx-2 my-0" id='date'>
            {postWithId.date}
          </p>
        </tweet-date>
      </div>
    </div>
  )
}

<script>
  import { format } from '@formkit/tempo'

  class TweetDate extends HTMLElement {
    constructor() {
      super();

      const dateElem = this.querySelector('#date');
      if (!dateElem) {
        return;
      }

      dateElem.textContent = format(this.dataset.message!, { date: "full", time: "short" });
    }
  }

  customElements.define('tweet-date', TweetDate);
</script>
