---
import { getCollection } from 'astro:content'

import { JSDOM } from 'jsdom';
import * as fs from 'fs'

import { SITE_URL } from '@/consts'

interface Props {
  url: string;
}

const { url: baseUrl } = Astro.props
const url = btoa(baseUrl)

const urlDataList = await getCollection('urlData') ?? []
let urlData = urlDataList.find((v) => v.id === url)?.data

if (urlData === undefined) {
  let title = '';
  let description = '';
  let image = '';
  let type: 'summary' | 'summary_large_image' = 'summary';

  const html = await(await fetch(baseUrl)).text();
  const dom = new JSDOM(html);

  const document = dom.window.document;

  const metaTags = document.querySelectorAll('meta');

  for (const metaTag of metaTags) {
    const property = metaTag.getAttribute('property');
    const content = metaTag.getAttribute('content');

    if (content === null) {
      continue;
    }

    if (property === 'og:title') {
      title = content;
    }

    if (property === 'og:description') {
      description = content;
    }

    if (property === 'og:image') {
      image = content;
    }

    if (property === 'twitter:card') {
      if (content === 'summary_large_image') {
        type = 'summary_large_image';
      }
    }
  }

  if (title === '') {
    const titleElement = document.querySelector("title");
    if (titleElement) {
      title = titleElement.textContent || "";
    }
    if (title === '') {
      throw new Error('No title found');
    }
  }

  if (description === '') {
    const descriptionElement = document.querySelector("description");
    if (descriptionElement) {
      description = descriptionElement.getAttribute('content') || "";
    }
  }

  urlData = {
    title,
    description,
    image,
    type
  }

  fs.writeFileSync(`./src/content/urlData/${url}.json`, JSON.stringify(urlData));
}

const isOtherSite = !baseUrl.includes(SITE_URL)

---

<a
  class="flex mx-auto my-4 w-full md:w-[600px]"
  target={isOtherSite ? '_blank' : '_self'}
  href={baseUrl}
>
  <div class="flex bg-white hover:bg-gray-50 border border-gray-400 w-full text-black hover:text-primary-500 rounded-lg">
    {
      urlData.type === 'summary' && (
        <div class="flex flex-row w-full items-center">
          <img src={urlData.image} alt={urlData.title} class="h-24 w-24 md:h-36 md:w-36 object-cover" />
          <div class="px-4 overflow-hidden">
            <p class="overflow-hidden text-xs m-0 text-nowrap text-gray-400">{baseUrl.split("/")[2]}</p>
            <p class="overflow-hidden text-lg m-0 font-semibold text-nowrap">{urlData.title}</p>
            <p class="overflow-hidden text-sm m-0 text-nowrap text-gray-500">{urlData.description}</p>
          </div>
        </div>
      )
    }
    {
      urlData.type === 'summary_large_image' && (
        <div class="flex flex-col w-full items-center">
          <img src={urlData.image} alt={urlData.title} class="w-full max-h-[400px] object-cover" />
          <div class="flex flex-col w-full mx-2 overflow-hidden">
            <p class="overflow-hidden text-xs mx-2 my-1 text-nowrap text-gray-400">{baseUrl.split("/")[2]}</p>
            <p class="overflow-hidden text-lg mx-2 mt-1 mb-0 font-semibold text-nowrap">{urlData.title}</p>
            <p class="overflow-hidden text-sm m-2 text-nowrap text-gray-500">{urlData.description}</p>
          </div>
        </div>
      )
    }
  </div>
</a>
